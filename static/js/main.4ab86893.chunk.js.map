{"version":3,"sources":["components/CourseForm.js","components/CourseList.js","App.js","serviceWorker.js","index.js"],"names":["CourseForm","props","onSubmit","addCourse","type","value","current","onChange","updateCourse","CourseList","state","isEdit","renderCourse","details","name","onClick","toggleState","deleteCourse","index","setState","updateCourseItem","e","preventDefault","editCourse","input","renderUpdateForm","ref","v","defaultValue","this","Component","App","courses","target","push","splice","courseList","map","course","key","update","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wMAUeA,EARI,SAACC,GAChB,OACI,0BAAMC,SAAYD,EAAME,WACpB,2BAAOC,KAAK,OAAQC,MAAOJ,EAAMK,QAAUC,SAAWN,EAAMO,eAC5D,4BAAQJ,KAAK,UAAb,kBCkDGK,E,2MArDXC,MAAQ,CACAC,QAAS,G,EAGjBC,aAAe,WACX,OACC,4BACG,kCAAQ,EAAKX,MAAMY,QAAQC,MAC3B,4BAAQC,QAAW,WAAM,EAAKC,gBAA9B,gBACA,4BAAQD,QAAW,WAAM,EAAKd,MAAMgB,aAAa,EAAKhB,MAAMiB,SAA5D,qB,EAORF,YAAc,WAAO,IACZL,EAAU,EAAKD,MAAfC,OACL,EAAKQ,SAAS,CACVR,QAASA,K,EAIjBS,iBAAmB,SAACC,GAChBA,EAAEC,iBACF,EAAKrB,MAAMsB,WAAW,EAAKtB,MAAMiB,MAAO,EAAKM,MAAMnB,OACnD,EAAKW,e,EAKTS,iBAAmB,WACf,OACC,0BAAMvB,SAAU,EAAKkB,kBACtB,2BAAOhB,KAAK,OAAOsB,IAAO,SAACC,GAAM,EAAKH,MAAQG,GAAKC,aAAgB,EAAK3B,MAAMY,QAAQC,OACtF,mD,wEASO,IACFH,EAAUkB,KAAKnB,MAAfC,OACL,OACM,kBAAC,WAAD,KACGA,EAASkB,KAAKJ,mBAAqBI,KAAKjB,oB,GAjDhCkB,aCwFVC,E,2MArFbrB,MAAQ,CACNsB,QAAU,CACR,CAAClB,KAAO,QACR,CAACA,KAAO,OACR,CAACA,KAAO,WAEVR,QAAQ,I,EAKZE,aAAe,SAACa,GACd,EAAKF,SAAU,CACXb,QAASe,EAAEY,OAAO5B,S,EAQxBF,UAAY,SAACkB,GACXA,EAAEC,iBACF,IAAIhB,EAAU,EAAKI,MAAMJ,QACrB0B,EAAU,EAAKtB,MAAMsB,QACzB,GAAe,KAAX1B,EAEF,OAAO,EAET0B,EAAQE,KAAK,CAACpB,KAAMR,IACpB,EAAKa,SAAS,CACZa,UACA1B,QAAQ,M,EAQZW,aAAe,SAACC,GAEhB,IAAIc,EAAU,EAAKtB,MAAMsB,QACxBA,EAAQG,OAAOjB,EAAO,GACvB,EAAKC,SAAS,CACZa,a,EAaFT,WAAa,SAACL,EAAQb,GAChB,IAAI2B,EAAU,EAAKtB,MAAMsB,QACXA,EAAQd,GAChB,KAAWb,EACjB,EAAKc,SAAS,CACVa,a,wEAOG,IAAD,OAEFI,EADYP,KAAKnB,MAAhBsB,QACoBK,KAAK,SAACC,EAASpB,GACtC,OAAO,kBAAC,EAAD,CAAYL,QAAWyB,EAAQC,IAAOrB,EAAOA,MAAOA,EAAOsB,OAAQ,EAAKhC,aAAcL,UAAW,EAAKA,UAAWc,aAAc,EAAKA,aAAcM,WAAY,EAAKA,gBAG9K,OACI,6BAASkB,UAAU,OACnB,4CACA,kBAAC,EAAD,CAAanC,QAAUuB,KAAKnB,MAAMJ,QAASE,aAAcqB,KAAKrB,aAAcL,UAAW0B,KAAK1B,UAAWoB,WAAYM,KAAKN,aACxH,gCAAMa,Q,GAjFIN,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4ab86893.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst CourseForm = (props) => {\r\n    return (\r\n        <form onSubmit = {props.addCourse}>\r\n            <input type=\"text\"  value={props.current}  onChange ={props.updateCourse}/>\r\n            <button type=\"submit\"> Add Course </button>\r\n        </form>\r\n    )\r\n}\r\nexport default CourseForm \r\n ","import React, {Component,Fragment} from 'react';\r\n\r\nclass CourseList extends Component {\r\n    state = {\r\n            isEdit : false\r\n    }\r\n    // render Course Item\r\n    renderCourse = () => {\r\n        return (\r\n         <li>\r\n            <span> {this.props.details.name}</span>\r\n            <button onClick = {()=> {this.toggleState()}}>Edit Course </button>\r\n            <button onClick = {()=> {this.props.deleteCourse(this.props.index)}}> Delete Course </button>                \r\n        </li>\r\n        )\r\n    } \r\n\r\n    //toggleState\r\n\r\n    toggleState = () => {\r\n        let {isEdit} = this.state;\r\n        this.setState({\r\n            isEdit :!isEdit\r\n        })\r\n    }\r\n\r\n    updateCourseItem = (e) => {\r\n        e.preventDefault();\r\n        this.props.editCourse(this.props.index ,this.input.value );\r\n        this.toggleState();\r\n\r\n    } \r\n\r\n    // render Update Form\r\n    renderUpdateForm = () =>{\r\n        return (\r\n         <form onSubmit={this.updateCourseItem}>\r\n        <input type=\"text\" ref = {(v)=> {this.input = v }} defaultValue = {this.props.details.name} />\r\n        <button>Update Course</button>\r\n        </form>\r\n        )\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n    render () {\r\n        let {isEdit} = this.state;\r\n        return(\r\n              <Fragment>\r\n               { isEdit ? this.renderUpdateForm() : this.renderCourse() }    \r\n              </Fragment>    \r\n        ); \r\n    }\r\n}\r\nexport default CourseList;\r\n\r\n ","import React, { Component } from 'react';\nimport CourseForm from './components/CourseForm'\nimport CourseList from './components/CourseList'\n\nclass App extends Component {\n  state = {\n    courses : [\n      {name : \"HTML\"},\n      {name : \"CSS\"},\n      {name : \"jquery\"},\n    ],\n    current:''\n  }\n\n\n// update Course \nupdateCourse = (e)=> {\n  this.setState ({\n      current: e.target.value\n  }\n  )\n  }\n\n\n\n//add Course \naddCourse = (e) => {\n  e.preventDefault();\n  let current = this.state.current;\n  let courses = this.state.courses;\n  if (current ==='')\n  {\n    return false;\n  } else {\n  courses.push({name: current})\n  this.setState({\n    courses,\n    current:''\n  })\n}\n} \n\n\n\n//deleteCourse \ndeleteCourse = (index) => {\n//console.log(index);\nlet courses = this.state.courses;\n courses.splice(index ,1);\nthis.setState({\n  courses\n})\n}\n\n\n\n\n\n\n\n\n    //  editCourse\n\neditCourse = (index , value) => {\n      let courses = this.state.courses;\n      let course  = courses[index];\n      course['name'] = value;\n      this.setState({\n          courses\n      })\n\n  }\n\n\n  \n  render () {\n    const {courses} = this.state;\n    const courseList = courses.map( (course , index) => {\n        return <CourseList details = {course} key = {index} index={index} update={this.updateCourse} addCourse={this.addCourse} deleteCourse={this.deleteCourse} editCourse={this.editCourse}/>\n       })\n   \n    return (\n        <section className=\"App\">\n        <h2> Add Course </h2>    \n        <CourseForm  current= {this.state.current} updateCourse={this.updateCourse} addCourse={this.addCourse} editCourse={this.editCourse}/>\n        <ul> {courseList}</ul>\n        </section>\n      );\n   }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}